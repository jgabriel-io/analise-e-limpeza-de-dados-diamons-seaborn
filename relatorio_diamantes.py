# relatorio_diamantes_final_v3.py

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import os
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
import warnings

# --- CONFIGURA√á√ÉO INICIAL ---
matplotlib.use('Agg')
warnings.filterwarnings('ignore', category=FutureWarning)

console = Console(record=True)

# --- CRIA√á√ÉO DA PASTA DE IMAGENS ---
output_folder = "img"
if not os.path.exists(output_folder):
    os.makedirs(output_folder)
    console.print(f"üìÅ Pasta '{output_folder}' criada para salvar os gr√°ficos.")

# --- IN√çCIO DO SCRIPT ---
console.rule("[bold magenta]RELAT√ìRIO DE AN√ÅLISE AVAN√áADA DO DATASET 'DIAMONDS' (LOCAL)[/bold magenta]", style="magenta")

# --- INTRODU√á√ÉO ---
intro_text = (
    "Este script realiza a limpeza, prepara√ß√£o e an√°lise avan√ßada do dataset 'diamonds' (carregado localmente). "
    "O objetivo √© transformar vari√°veis, limpar dados, analisar o valor relativo (pre√ßo por quilate) e "
    "analisar a rela√ß√£o entre as caracter√≠sticas dos diamantes e seus pre√ßos."
)
console.print(Panel(intro_text, title="[cyan]Introdu√ß√£o[/cyan]", border_style="cyan"))

# --- ETAPA 1: CARREGAMENTO DOS DADOS (COM TRATAMENTO DE ERRO) ---
console.print("\n\n" + "="*80)
console.print("üì• [bold]ETAPA 1: CARREGAMENTO DOS DADOS[/bold] üì•")
console.print("="*80 + "\n")
try:
    console.print("Carregando dataset 'diamonds.csv' local...")
    df_bruto = pd.read_csv('diamonds.csv')
    console.print("[bold green]Dataset carregado com sucesso![/bold green]")

except FileNotFoundError:
    error_text = "O arquivo 'diamonds.csv' n√£o foi encontrado. Por favor, certifique-se de que ele est√° na mesma pasta que este script."
    console.print(Panel(error_text, title="[bold red]ERRO CR√çTICO[/bold red]", border_style="red"))
    console.rule("[bold red]EXECU√á√ÉO INTERROMPIDA[/bold red]", style="red")
    sys.exit()
except Exception as e:
    error_text = f"Ocorreu um erro ao ler o arquivo: {e}"
    console.print(Panel(error_text, title="[bold red]ERRO CR√çTICO[/bold red]", border_style="red"))
    console.rule("[bold red]EXECU√á√ÉO INTERROMPIDA[/bold red]", style="red")
    sys.exit()

# --- ETAPA 2: DIAGN√ìSTICO DOS DADOS BRUTOS ---
console.print("\n\n" + "="*80)
console.print("üìä [bold]ETAPA 2: DIAGN√ìSTICO DOS DADOS BRUTOS[/bold] üìä")
console.print("="*80 + "\n")
console.print(f"O dataset bruto foi carregado com [bold]{df_bruto.shape[0]}[/bold] linhas e [bold]{df_bruto.shape[1]}[/bold] colunas.")
console.print()

if 'Unnamed: 0' in df_bruto.columns:
    console.print("Removendo coluna 'Unnamed: 0' (√≠ndice extra) do dataset.")
    df_bruto = df_bruto.drop(columns=['Unnamed: 0'])
    console.print(f"Dataset agora possui [bold]{df_bruto.shape[1]}[/bold] colunas.")
    console.print()


impossible_dims = df_bruto[(df_bruto['x'] == 0) | (df_bruto['y'] == 0) | (df_bruto['z'] == 0)].shape[0]

dirty_data_text = (
    f"A an√°lise inicial revelou dados nulos (se houver):\n{df_bruto.isnull().sum()}\n\n"
    f"Mais importante, foi identificado um problema de integridade dos dados:\n"
    f"- [bold red]{impossible_dims} diamantes[/bold red] est√£o listados com dimens√µes ('x', 'y' ou 'z') iguais a 0, o que √© fisicamente imposs√≠vel.\n\n"
    "As colunas 'cut', 'color' e 'clarity' s√£o categ√≥ricas e precisam ser codificadas para an√°lise de correla√ß√£o."
)
console.print(Panel(dirty_data_text, title="[yellow]Diagn√≥stico dos Dados Brutos[/yellow]", border_style="yellow"))

# --- ETAPA 3: PROCESSO DE LIMPEZA E PREPARA√á√ÉO ---
console.print("\n\n" + "="*80)
console.print("‚ú® [bold]ETAPA 3: PROCESSO DE LIMPEZA E PREPARA√á√ÉO[/bold] ‚ú®")
console.print("="*80 + "\n")

df_limpo = df_bruto[(df_bruto['x'] > 0) & (df_bruto['y'] > 0) & (df_bruto['z'] > 0)].copy()
removed_rows = df_bruto.shape[0] - df_limpo.shape[0]

cut_map = {'Fair': 1, 'Good': 2, 'Very Good': 3, 'Premium': 4, 'Ideal': 5}
df_limpo['cut_encoded'] = df_limpo['cut'].map(cut_map)

color_map = {'J': 1, 'I': 2, 'H': 3, 'G': 4, 'F': 5, 'E': 6, 'D': 7}
df_limpo['color_encoded'] = df_limpo['color'].map(color_map)

clarity_map = {'I1': 1, 'SI2': 2, 'SI1': 3, 'VS2': 4, 'VS1': 5, 'VVS2': 6, 'VVS1': 7, 'IF': 8}
df_limpo['clarity_encoded'] = df_limpo['clarity'].map(clarity_map)

df_limpo['volume'] = df_limpo['x'] * df_limpo['y'] * df_limpo['z']
df_limpo['price_per_carat'] = df_limpo['price'] / df_limpo['carat']

cleaning_steps_text = (
    "As seguintes a√ß√µes foram tomadas:\n"
    f"1. [bold]Remo√ß√£o de Linhas:[/bold] {removed_rows} linhas com dimens√µes 'x', 'y' ou 'z' zeradas foram removidas.\n"
    "2. [bold]Codifica√ß√£o:[/bold] 'cut', 'color' e 'clarity' foram mapeadas para valores num√©ricos.\n"
    "3. [bold]Engenharia de Feature (Volume):[/bold] Criada a coluna 'volume' (x*y*z).\n"
    "4. [bold]Engenharia de Feature (Valor Relativo):[/bold] Criada a coluna 'price_per_carat' (price/carat)."
)
console.print(Panel(cleaning_steps_text, title="[yellow]A√ß√µes de Limpeza e Prepara√ß√£o[/yellow]", border_style="yellow"))

df_limpo.to_csv('diamonds_dados_limpos.csv', index=False)
console.print("\nüìù [bold]O dataset limpo e preparado foi salvo como 'diamonds_dados_limpos.csv'[/bold]")

# --- ETAPA 4: QUATRO AN√ÅLISES BIVARIADAS (REQUISITO 1) ---
sns.set_style("whitegrid")
console.print("\n\n" + "="*80)
console.print("üìà [bold]ETAPA 4: INICIANDO AN√ÅLISES BIVARIADAS[/bold] üìà")
console.print("="*80 + "\n")

# --- An√°lise 1: carat vs price ---
console.print("  [bold]1. An√°lise: Quilates (carat) vs. Pre√ßo (price)[/bold]")
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df_limpo, x='carat', y='price', alpha=0.1, edgecolor=None)
plt.title('Rela√ß√£o entre Quilates (carat) e Pre√ßo (price)', fontsize=16)
plt.xlabel('Quilates (carat)', fontsize=12)
plt.ylabel('Pre√ßo (USD)', fontsize=12)
plt.tight_layout()
plt.savefig(os.path.join(output_folder, 'grafico_1_carat_vs_price.png'))
console.print(f"  üìà Gr√°fico salvo como: '{output_folder}/grafico_1_carat_vs_price.png'")
analise1_text = (
    "Como esperado, 'carat' √© um dos principais fatores do pre√ßo. A rela√ß√£o √© positiva e exponencial: "
    "quanto maior o peso em quilates, mais o pre√ßo aumenta, e esse aumento se acelera."
)
console.print() 
console.print(Panel(analise1_text, title="[cyan]Conclus√£o (An√°lise 1)[/cyan]", border_style="cyan", width=80))

# --- An√°lise 2: cut vs. price_per_carat ---
console.print("\n  [bold]2. An√°lise (Avan√ßada): Qualidade do Corte (cut) vs. Pre√ßo POR QUILATE[/bold]")
cut_order = ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal']
plt.figure(figsize=(10, 6))
sns.boxplot(data=df_limpo, x='cut', y='price_per_carat', order=cut_order, palette="coolwarm")
plt.title('Valor Relativo (Pre√ßo por Quilate) por Qualidade do Corte', fontsize=16)
plt.xlabel('Qualidade do Corte', fontsize=12)
plt.ylabel('Pre√ßo por Quilate (USD)', fontsize=12)
plt.tight_layout()
plt.savefig(os.path.join(output_folder, 'grafico_2_cut_vs_price_per_carat.png'))
console.print(f"  üìà Gr√°fico salvo como: '{output_folder}/grafico_2_cut_vs_price_per_carat.png'")
analise2_text = (
    "Ao normalizar pelo 'carat' (analisando pre√ßo por quilate), a verdadeira influ√™ncia do corte fica clara. "
    "Diamantes 'Ideal' t√™m um valor (pre√ßo/quilate) mediano significativamente maior "
    "que todos os outros, mostrando que o mercado paga mais pela qualidade do corte, independentemente do tamanho."
)
console.print() 
console.print(Panel(analise2_text, title="[cyan]Conclus√£o (An√°lise 2)[/cyan]", border_style="cyan", width=80))

# --- An√°lise 3: color vs. price_per_carat ---
console.print("\n  [bold]3. An√°lise (Avan√ßada): Cor (color) vs. Pre√ßo POR QUILATE[/bold]")
color_order = ['J', 'I', 'H', 'G', 'F', 'E', 'D'] # Pior para Melhor
plt.figure(figsize=(10, 6))
sns.violinplot(data=df_limpo, x='color', y='price_per_carat', order=color_order, palette="YlOrBr")
plt.title('Valor Relativo (Pre√ßo por Quilate) por Cor', fontsize=16)
plt.xlabel('Cor (J=Pior -> D=Melhor)', fontsize=12)
plt.ylabel('Pre√ßo por Quilate (USD)', fontsize=12)
plt.tight_layout()
plt.savefig(os.path.join(output_folder, 'grafico_3_color_vs_price_per_carat.png'))
console.print(f"  üìà Gr√°fico salvo como: '{output_folder}/grafico_3_color_vs_price_per_carat.png'")
analise3_text = (
    "Esta an√°lise mostra claramente a escada de valor. √Ä medida que a cor melhora (de J para D), "
    "o pre√ßo por quilate mediano sobe consistentemente. Isso prova que, para um mesmo tamanho, "
    "um diamante de cor 'D' √© muito mais valioso que um de cor 'J'."
)
console.print() 
console.print(Panel(analise3_text, title="[cyan]Conclus√£o (An√°lise 3)[/cyan]", border_style="cyan", width=80))

# --- An√°lise 4: depth vs table ---
console.print("\n  [bold]4. An√°lise: Profundidade (depth) vs. Largura da Mesa (table)[/bold]")
g = sns.jointplot(data=df_limpo, x='table', y='depth', kind='hex', cmap='afmhot')
g.fig.suptitle('Rela√ß√£o de Densidade entre "Depth" e "Table"', y=1.03)
g.fig.tight_layout()
g.savefig(os.path.join(output_folder, 'grafico_4_depth_vs_table.png'))
console.print(f"  üìà Gr√°fico salvo como: '{output_folder}/grafico_4_depth_vs_table.png'")
analise4_text = (
    "Esta an√°lise explora a rela√ß√£o entre duas propor√ß√µes de corte. A grande maioria dos diamantes "
    "se concentra em uma faixa espec√≠fica: 'table' entre 54-60 e 'depth' entre 60-64. "
    "Isso representa o 'ponto ideal' de corte buscado pela ind√∫stria."
)
console.print() 
console.print(Panel(analise4_text, title="[cyan]Conclus√£o (An√°lise 4)[/cyan]", border_style="cyan", width=80))

# --- An√°lise 5: Multivariada (carat, price, clarity) ---
console.print("\n  [bold]5. An√°lise B√¥nus: Rela√ß√£o Pre√ßo/Quilate por N√≠vel de Pureza (clarity)[/bold]")
clarity_order = ['I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF']
g = sns.relplot(
    data=df_limpo,
    x='carat', y='price',
    col='clarity', col_order=clarity_order,
    col_wrap=4, 
    kind='scatter',
    alpha=0.1, s=10,
    height=3, aspect=1.2
)
g.fig.suptitle('Rela√ß√£o Pre√ßo x Quilate separada por Pureza (Clarity)', y=1.05, fontsize=16)
g.set_axis_labels("Quilates (carat)", "Pre√ßo (USD)")
g.fig.tight_layout()
g.savefig(os.path.join(output_folder, 'grafico_5_bonus_multivariada.png'))
console.print(f"  üìà Gr√°fico salvo como: '{output_folder}/grafico_5_bonus_multivariada.png'")
analise_bonus_text = (
    "Este gr√°fico m√∫ltiplo mostra como a pureza ('clarity') afeta a rela√ß√£o pre√ßo/quilate. "
    "Na pureza 'I1' (pior), a rela√ß√£o √© fraca. Conforme a pureza aumenta (ex: 'VVS2', 'IF'), "
    "a curva de pre√ßo se inclina para cima muito mais rapidamente. Diamantes 'IF' (perfeitos) "
    "t√™m um aumento de pre√ßo exponencial muito mais acentuado."
)
console.print() 
console.print(Panel(analise_bonus_text, title="[cyan]Conclus√£o (An√°lise B√¥nus)[/cyan]", border_style="cyan", width=80))


# --- ETAPA 5: DUAS AN√ÅLISES DE CORRELA√á√ÉO (REQUISITO 2) ---
console.print("\n\n" + "="*80)
console.print("üîó [bold]ETAPA 5: INICIANDO DUAS AN√ÅLISES DE CORRELA√á√ÉO[/bold] üîó")
console.print("="*80 + "\n")

# --- Correla√ß√£o 1: Matriz de Correla√ß√£o Geral (Heatmap) ---
console.print("  [bold]1. Correla√ß√£o: Matriz de Correla√ß√£o (Heatmap)[/bold]")
numeric_cols = [
    'price', 'carat', 'depth', 'table', 'x', 'y', 'z', 'volume',
    'cut_encoded', 'color_encoded', 'clarity_encoded', 'price_per_carat'
]
corr_matrix = df_limpo[numeric_cols].corr()

plt.figure(figsize=(14, 10))
sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm', linewidths=0.5)
plt.title('Matriz de Correla√ß√£o das Vari√°veis do Diamante', fontsize=16)
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.savefig(os.path.join(output_folder, 'grafico_6_heatmap_correlacao.png'))
console.print(f"  üìà Gr√°fico salvo como: '{output_folder}/grafico_6_heatmap_correlacao.png'")
analise_corr1_text = (
    "O heatmap mostra visualmente as correla√ß√µes lineares (Pearson).\n"
    "1. [bold]'price'[/bold] tem correla√ß√£o alt√≠ssima com [bold]'carat' (0.92)[/bold], 'volume' (0.90), 'x' (0.88), 'y' (0.88) e 'z' (0.88).\n"
    "2. [bold]'price_per_carat'[/bold] (nosso novo indicador) mostra correla√ß√£o negativa com 'carat' (-0.07), "
    "mas correla√ß√µes positivas fortes com [bold]'clarity' (0.35)[/bold], [bold]'color' (0.43)[/bold] e [bold]'cut' (0.19)[/bold], "
    "provando que √© uma m√©trica melhor para avaliar a 'qualidade' do que o pre√ßo bruto."
)
console.print() 
console.print(Panel(analise_corr1_text, title="[cyan]Conclus√£o (Correla√ß√£o 1)[/cyan]", border_style="cyan"))

# --- Correla√ß√£o 2: As vari√°veis x, y e z influenciam no price? ---
console.print("\n  [bold]2. Correla√ß√£o: As dimens√µes (x, y, z) influenciam no pre√ßo?[/bold]")
correlations = corr_matrix['price'][['x', 'y', 'z', 'volume', 'carat']].sort_values(ascending=False)

tabela_corr = Table(title="Correla√ß√£o Direta com o Pre√ßo (price)", style="cyan", title_justify="left")
tabela_corr.add_column("Vari√°vel", justify="left", style="magenta")
tabela_corr.add_column("Coeficiente de Correla√ß√£o", justify="center", style="yellow")

for var, coef in correlations.items():
    tabela_corr.add_row(var, f"{coef:.4f}")

console.print(tabela_corr)

analise_corr2_text = (
    "Sim, as vari√°veis x (comprimento), y (largura) e z (profundidade) influenciam [bold]fortemente[/bold] o pre√ßo. "
    "A tabela acima mostra que todas t√™m uma correla√ß√£o linear muito alta (pr√≥xima de 0.88) com 'price'.\n"
    "Isso ocorre porque as dimens√µes determinam o 'volume' do diamante, que por sua vez est√° "
    "quase perfeitamente correlacionado com o 'carat' (peso), que √© o principal fator de pre√ßo."
)
console.print() 
console.print(Panel(analise_corr2_text, title="[cyan]Conclus√£o (Correla√ß√£o 2)[/cyan]", border_style="cyan"))

# --- ETAPA FINAL: EXPORTAR RELAT√ìRIO ---
try:
    html_output = "relatorio_final_diamantes.html"
    console.save_html(html_output)
    console.print(f"\nüìÑ [bold]Relat√≥rio completo salvo como arquivo HTML:[/bold] {html_output}")
except Exception as e:
    console.print(f"\n[bold red]N√£o foi poss√≠vel salvar o relat√≥rio HTML:[/bold] {e}")

console.rule("[bold green]FIM DO RELAT√ìRIO[/bold green]", style="green")